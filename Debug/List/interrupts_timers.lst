###############################################################################
#
# IAR C/C++ Compiler V7.12.3.989/W32 for MSP430           05/Mar/2020  15:49:13
# Copyright 1996-2019 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\LittleRandom\Documents\NCSU\3_Junior\Spring Term 2020\ECE
#        306\Projects\Project 06\interrupts_timers.c
#    Command line  =  
#        -f C:\Users\LITTLE~1\AppData\Local\Temp\EWB328.tmp
#        ("C:\Users\LittleRandom\Documents\NCSU\3_Junior\Spring Term 2020\ECE
#        306\Projects\Project 06\interrupts_timers.c" -lC
#        "C:\Users\LittleRandom\Documents\NCSU\3_Junior\Spring Term 2020\ECE
#        306\Projects\Project 06\Debug\List" -o
#        "C:\Users\LittleRandom\Documents\NCSU\3_Junior\Spring Term 2020\ECE
#        306\Projects\Project 06\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FR2355__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\LittleRandom\Documents\NCSU\3_Junior\Spring Term 2020\ECE
#        306\Projects\Project 06\Debug\List\interrupts_timers.lst
#    Object file   =  
#        C:\Users\LittleRandom\Documents\NCSU\3_Junior\Spring Term 2020\ECE
#        306\Projects\Project 06\Debug\Obj\interrupts_timers.r43
#
###############################################################################

C:\Users\LittleRandom\Documents\NCSU\3_Junior\Spring Term 2020\ECE 306\Projects\Project 06\interrupts_timers.c
      1          #include "msp430.h"

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x396
   \   union <unnamed> _A_TB0CCR2_L
   \                     _A_TB0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ae
   \   union <unnamed> _A_TB0IV_L
   \                     _A_TB0IV_L:
   \   000000                DS8 2
      2          #include "msp430fr2355.h"
      3          #include "macros.h"
      4          #include "functions.h"
      5          #include <string.h>
      6          
      7          extern volatile unsigned char update_display;
      8          
      9          extern volatile unsigned char display_changed;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     10          volatile unsigned long int display_counter= RESET;
   \                     display_counter:
   \   000000                DS8 4

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     11          volatile unsigned int counter=ONE + TEN_MS;
   \                     counter:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for counter>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          volatile unsigned int blackline_counter = RESET;
   \                     blackline_counter:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          unsigned int debounce_count = RESET;
   \                     debounce_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     14          volatile unsigned int debounce_counter_SW1 = ONE;
   \                     debounce_counter_SW1:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for debounce_counter_SW1>`

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          volatile unsigned int debounce_counter_SW2 = RESET;
   \                     debounce_counter_SW2:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          volatile unsigned int pulse = RESET;
   \                     pulse:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned int ready_to_move_counter = RESET;
   \                     ready_to_move_counter:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int follow_counter = RESET;
   \                     follow_counter:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          volatile unsigned int clock = RESET;
   \                     clock:
   \   000000                DS8 2
     20          
     21          
     22          #pragma vector = TIMERB0_CCR0_VECTOR

   \                                 In  segment ISR_CODE, align 2
     23          __interrupt void TimerB0_0_ISR(void){
   \                     TimerB0_0_ISR:
     24            // ----------------------------------------------------
     25            // TimerB0 0 Interrupt handle.
     26            // ----------------------------------------------------             
     27            //...... Add What you need happen in the interrupt ......
     28            TB0CCR0 += TB0CCR0_INTERVAL;                  // Add Offset to TBCCR0
   \   000000   B250C4099203 ADD.W   #0x9c4, &0x392
     29            display_counter++;
   \   000006   9253....     ADD.W   #0x1, &display_counter
   \   00000A   8263....     ADDC.W  #0x0, &display_counter + 2
     30            counter ++;
   \   00000E   9253....     ADD.W   #0x1, &counter
     31            pulse ++;
   \   000012   9253....     ADD.W   #0x1, &pulse
     32            blackline_counter++;
   \   000016   9253....     ADD.W   #0x1, &blackline_counter
     33            ready_to_move_counter++;
   \   00001A   9253....     ADD.W   #0x1, &ready_to_move_counter
     34            follow_counter ++;
   \   00001E   9253....     ADD.W   #0x1, &follow_counter
     35            clock++;
   \   000022   9253....     ADD.W   #0x1, &clock
     36          }
   \   000026   0013         RETI
   \   000028                REQUIRE _A_TB0CCR0_L
     37          //
     38          
     39          #pragma vector = TIMERB0_CCR1_VECTOR

   \                                 In  segment ISR_CODE, align 2
     40          __interrupt void TIMERB0_1_ISR(void){
   \                     TIMERB0_1_ISR:
   \   000000   3F15         PUSHM.W #0x4, R15
     41            
     42            // ----------------------------------------------------             
     43            // TimerB0 1 2, Overflow Interrupt Vector (TBIV ) handler
     44            // ----------------------------------------------------             
     45            
     46            switch(__even_in_range(TB0IV,CCR_RESET)){
   \   000002   1F42AE03     MOV.W   &0x3ae, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for TIMERB0_1_ISR>_0`:
   \   000008   223C         JMP     ??TIMERB0_1_ISR_1
   \   00000A   063C         JMP     ??TIMERB0_1_ISR_4
   \   00000C   1D3C         JMP     ??TIMERB0_1_ISR_5
   \   00000E   1F3C         JMP     ??TIMERB0_1_ISR_1
   \   000010   1E3C         JMP     ??TIMERB0_1_ISR_1
   \   000012   1D3C         JMP     ??TIMERB0_1_ISR_1
   \   000014   1C3C         JMP     ??TIMERB0_1_ISR_1
   \   000016   1B3C         JMP     ??TIMERB0_1_ISR_1
     47            case RESET: break;                              // No interrupt
     48            case CCR1:                                     // CCR1 not used
     49              //...... Add What you need happen in the interrupt ......
     50              
     51              debounce_counter_SW1++;
   \                     ??TIMERB0_1_ISR_4:
   \   000018   9253....     ADD.W   #0x1, &debounce_counter_SW1
     52              debounce_counter_SW2++;
   \   00001C   9253....     ADD.W   #0x1, &debounce_counter_SW2
     53              if(debounce_counter_SW1 > ONE){
   \   000020   B290C900.... CMP.W   #0xc9, &debounce_counter_SW1
   \   000026   0428         JNC     ??TIMERB0_1_ISR_2
     54                P4IE |= SW1;
   \   000028   E2D33B02     BIS.B   #0x2, &0x23b
     55                Red_LED_off();
   \   00002C   ........     CALLA   #Red_LED_off
     56              }
     57              if(debounce_counter_SW2 > ONE){
   \                     ??TIMERB0_1_ISR_2:
   \   000030   B290C900.... CMP.W   #0xc9, &debounce_counter_SW2
   \   000036   0428         JNC     ??TIMERB0_1_ISR_3
     58                P2IE |= SW2;
   \   000038   F2D21B02     BIS.B   #0x8, &0x21b
     59                Grn_LED_off(); 
   \   00003C   ........     CALLA   #Grn_LED_off
     60              }
     61              TB0CCR1 += TB0CCR1_INTERVAL;             // Add Offset to TBCCR1
   \                     ??TIMERB0_1_ISR_3:
   \   000040   B250C4099403 ADD.W   #0x9c4, &0x394
     62              break;
   \   000046   033C         JMP     ??TIMERB0_1_ISR_1
     63            case CCR2:                                     // CCR2 not used
     64              //...... Add What you need happen in the interrupt ......
     65              
     66              
     67              TB0CCR2 += TB0CCR2_INTERVAL;      // Add Offset to TBCCR2
   \                     ??TIMERB0_1_ISR_5:
   \   000048   B250C4099603 ADD.W   #0x9c4, &0x396
     68              break;
     69            case CCR_RESET:                                    // overflow
     70              //...... Add What you need happen in the interrupt ......
     71              break;
     72            default: break;
     73            }
     74          }
   \                     ??TIMERB0_1_ISR_1:
   \   00004E   3C17         POPM.W  #0x4, R15
   \   000050   0013         RETI
   \   000052                REQUIRE _A_PBIE_L
   \   000052                REQUIRE _A_PAIE_L
   \   000052                REQUIRE _A_TB0CCR1_L
   \   000052                REQUIRE _A_TB0CCR2_L
   \   000052                REQUIRE _A_TB0IV_L

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??TIMERB0_1_ISR::??INTVEC 84`:
   \   000054   ....         DC16    TIMERB0_1_ISR

   \                                 In  segment INTVEC, offset 0x56, root
   \                     `??TimerB0_0_ISR::??INTVEC 86`:
   \   000056   ....         DC16    TimerB0_0_ISR

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for counter>`:
   \   000000   CD00         DC16 205

   \                                 In  segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for debounce_counter_SW1>`:
   \   000000   C800         DC16 200
     75          
     76          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   TIMERB0_1_ISR
       12   -> Grn_LED_off
       12   -> Red_LED_off
      4   TimerB0_0_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for counter>
       2  ?<Initializer for debounce_counter_SW1>
      82  TIMERB0_1_ISR
       2  TIMERB0_1_ISR::??INTVEC 84
      40  TimerB0_0_ISR
       2  TimerB0_0_ISR::??INTVEC 86
       2  _A_PAIE_L
       2  _A_PBIE_L
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCR2_L
       2  _A_TB0IV_L
       2  blackline_counter
       2  clock
       2  counter
       2  debounce_count
       2  debounce_counter_SW1
       2  debounce_counter_SW2
       4  display_counter
       2  follow_counter
       2  pulse
       2  ready_to_move_counter

 
  12 bytes in segment DATA16_AN
   4 bytes in segment DATA16_I
   4 bytes in segment DATA16_ID
  18 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 122 bytes in segment ISR_CODE
 
 122 bytes of CODE  memory
   4 bytes of CONST memory (+  4 bytes shared)
  22 bytes of DATA  memory (+ 12 bytes shared)

Errors: none
Warnings: none
